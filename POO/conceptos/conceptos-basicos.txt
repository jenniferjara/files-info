Teoría de la Programación Orientada a Objetos

4 CONCEPTOS FUNDAMENTALES

1. Abstracción: proceso mental para extraer las característcas esenciales de algo, define el comportamiento general de un objeto.

2. Encapsular: 
	Protege las propiedades y métodos de un objeto, evita que sean modificados.
	Se define tres niveles de acceso:
	- Público: es accesible para cualquier clase exterior y cualquier parte del programa.
	- Protegido: es accesible para la clase y las clases que la heredan (funciones miembros de esta clase y sus subclases).
	- Privado: acceso restringido para los metodos de la clase.

3. Modularidad:
	Subdividir en módulos (partes pequeñas de código), que sean los más independiente posible de la aplicación y tengan sentido. 
	Permite añadir o extraer componentes sin afectar el funcionamiento de la aplicación en general. 
	Ellos se pueden compilar por separado pero aún teniendo conexión con otros módulos de las aplicación.

4. Jerarquización:
	Orden de los elementos, segun responsabilidad, grados, incumbencia con otros.
	En POO se usa una jerarquización basada en composión, parecida un árbol (raíz y ramas).

CLASES en POO
- Son abstraciones de objetos, ya que solo lo esencial y general para crear un objeto a partir de una clase
	Propiedades: características de los objetos (clase), son como variables que almacenan datos relacionados al objeto.
	Métodos: funcionalidades, acciones de los objetos.

OBJETOS en POO
- son ejemplares de una clase.
- crear objetos a partir de una clase se llama instanciar
	Estados: valor que toma una propiedad del objeto.
	Mensajes: es como los métodos ejecutan acciones y así los objetos interactuan entre ellos. 
	Usualmenete, tiene tres partes: objeto destinatario, mensaje, parametro

MIEMBRO 'Static'
- Son aquellos que tienen un valor asignado dentro de una clase, no necesitan una instancia para acceder a ellos (es decir crear un objeto nuevo).
- Son elementos que existen dentro de la propia clase y para acceder los cuales no necesitamos haber creado ningún objeto de esa clase. 
	Atributos estáticos: suelen referenciarse usando el nombre de la clase, por ejemplo: Clase.atributo (donde “Clase” es el nombre de la clase y “atributo” es el nombre del atributo).
	Métodos estáticos: la invocación suele hacerse llamando a Clase.metodo() para ejecutarlos.

HERENCIA
- Permite definir nuevas clases a partir de una clase base (superclase, padre). 
- Las clases que derivan (subclases, heredadas, derivadas o hijos) heredan todo el comportamiento de la clases base, ademas de poder implementar variables y métodos propios.
- Benenficios de la herencia en POO: la jerarquía y DRY (reutilización de código, es cierto que con los métodos ya se tiene cierto nivel de DRY pero no se aprovecha al mámo)
- veamos a las herencias como una especie de especialización de la clase padre.

POLIFORMISMO
- varia segun el tipado del lenguaje,
	tipado estático: recibe tipo de datos segun el metodo, podemos acceder a estos por jerarquía de clases, ya que permite el acceso y esa 'relajacion' en el tipo de dato. en este tipo de lenguaje es donde se aprecia más el poliformismo. 
	tipado dinámico: como el tipado es debil recibe cualquier tipo de dato , el poliformismo no tiene tanta relevancia. cuando usas poliformismo y herencia con este tipo de datos de llama de tipado genérico.
- evita la creacion de métodos para cada clase derivada, haciendo más DRY el código y tambien porque aceptará otras clases derivadas posteriores a la clase padre.

CLASES ABSTRACTAS
- Sirve de modelo base para la creación de clases derivadas.
- Definen e implementan parcialmente comportamientos, pero la mayor parte de ellos no se definen ni implementan totalmente.
- No se puede instanciar un objeto de estas clases, lo que se hace es extenderla a otra y a partir de ella poder crear nuevos objetos.
- Si un método es declarado como abstracto, implica que la clase será declarada como abstracta, pero una clase se abstracta no implica que sus métodos lo sean, solo implica que no se pueda instanciar objetos.
- Puede ser definido de cualquier vizibilidad (public, private, protected).

INTERFACES
- Son muy similares a las clases abstractas, posees un número de métodos generales para crear objetos con características más específicas. 
- Es como un contrato, ya que define lo que la clase va a implementar o hacer, sin decirle cómo lo hará ya que cada clase es independiente de como realiza las acciones.
- Una clase puede implementar varios interfaces al mismo tiempo.
- Todos los métodos deben tener vizibilidad publica.

